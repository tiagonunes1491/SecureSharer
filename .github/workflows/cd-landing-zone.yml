# Template for deploying a landing zone using Azure Bicep templates
# This workflow is triggered manually and allows the user to select the target environment (dev or prod).
name: 'CD - Landing Zone'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        type: choice
        options:
          - dev
          - prod

jobs:
  deploy-landing-zone:
    name: 'Deploy Landing Zone'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: ${{ inputs.environment }}
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
            
      - name: 'Login to Azure before PIM approval'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: 'Activate PIM Roles for Group and Wait for Approval'
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_UAMI_PRINCIPAL_ID: ${{ secrets.AZURE_PRINCIPAL_ID }}
          AZURE_PIM_GROUP_OBJECT_ID: ${{ secrets.AZURE_PIM_GROUP_OBJECT_ID }}
        run: |
          set -e # Exit immediately if a command fails
          
          # Step 1: Get an access token specifically for Microsoft Graph API
          echo "Acquiring access token for Microsoft Graph API..."
          GRAPH_TOKEN=$(az account get-access-token --resource-type ms-graph --query accessToken --output tsv)
          
          # Step 2: Find the ID of the role definition (e.g., Contributor)
          echo "Finding Role Definition ID for 'Contributor'..."
          CONTRIBUTOR_ROLE_DEF_ID=$(az role definition list --name "Contributor" --query "[0].id" -o tsv)

          # Step 3: Find the PIM eligibility schedule for the group
          echo "Finding PIM eligibility schedule for the group..."
          # The backtick before $filter has been removed in the line below
          PIM_ELIGIBILITY_ID=$(az rest --method GET --uri "https://graph.microsoft.com/v1.0/roleManagement/directory/roleEligibilitySchedules?$filter=principalId eq '$AZURE_PIM_GROUP_OBJECT_ID' and roleDefinitionId eq '$CONTRIBUTOR_ROLE_DEF_ID'" --headers "Authorization=Bearer $GRAPH_TOKEN" --query "value[0].id" -o tsv)
          
          if [ -z "$PIM_ELIGIBILITY_ID" ]; then
            echo "::error::Could not find PIM 'Contributor' eligibility for the specified group. Ensure the group is eligible for the role in PIM."
            exit 1
          fi

          # Step 4: Submit the PIM activation request FOR THE GROUP using the MS Graph API
          echo "Submitting PIM activation request for the group..."
          REQUEST_BODY=$(printf '{"principalId":"%s","roleDefinitionId":"%s","directoryScopeId":"/","justification":"GH Actions Run %s","scheduleInfo":{"startDateTime":"%s","expiration":{"type":"afterDuration","duration":"PT1H"}}}' "$AZURE_PIM_GROUP_OBJECT_ID" "$CONTRIBUTOR_ROLE_DEF_ID" "${{ github.run_id }}" "$(date -u -Iseconds)")
          az rest --method POST --uri "https://graph.microsoft.com/v1.0/roleManagement/directory/roleAssignmentScheduleRequests" --headers "Authorization=Bearer $GRAPH_TOKEN" "Content-Type=application/json" --body "$REQUEST_BODY"

          # Step 5: Wait for your manual approval
          echo "Workflow is now paused, waiting for manual PIM approval in the Azure Portal..."
          end_time=$((SECONDS+600)) # 10-minute timeout
          
          while [ $SECONDS -lt $end_time ]; do
            # Check if the UAMI has inherited the 'Contributor' role
            active_roles=$(az role assignment list --assignee $AZURE_UAMI_PRINCIPAL_ID --include-groups --scope "/subscriptions/$AZURE_SUBSCRIPTION_ID" --query "[].roleDefinitionName" -o tsv)
            if echo "$active_roles" | grep -q "Contributor"; then
              echo "Required role has been approved and is now active for the UAMI!"
              break
            fi
            echo "Role not active yet. Waiting 30 seconds..."
            sleep 30
          done
          

      - name: 'Re-login to Azure after PIM approval'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Deploy Landing Zone bicep template'
        env:
          AZURE_PREFIX_SECRET: ${{ secrets.AZURE_PREFIX }}
        run: |
          az deployment sub create \
            --name "landing-zone-${{ inputs.environment }}-${{ github.run_id }}" \
            --location ${{ vars.AZURE_REGION }} \
            --template-file ./infrastructure/landing-zone.bicep \
            --parameters environment=${{ inputs.environment }} location=${{ vars.AZURE_REGION }} prefix=${{ env.AZURE_PREFIX_SECRET }} tags="Environment=${{ inputs.environment }} Project=${{ vars.PROJECT_NAME }} DeployedBy=GitHubActions RunId=${{ github.run_id }}"
