# Template for deploying a landing zone using Azure Bicep templates
# This workflow is triggered manually and allows the user to select the target environment (dev or prod).
name: 'CD - Landing Zone'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        type: choice
        options:
          - dev
          - prod

jobs:
  deploy-landing-zone:
    name: 'Deploy Landing Zone'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: ${{ inputs.environment }}
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
     
      # --- ADD THIS NEW DEBUGGING STEP ---
      - name: 'Debug: List available secret keys'
        run: |
          echo "Listing available secret keys to check for AZURE_CLIENT_ID..."
          echo "${{ toJSON(secrets) }}"
     
      # This step authenticates, requests PIM activation, and waits for your approval.
      - name: 'Request PIM Roles and Wait for Approval'
        # The 'env' block must be at the same level as 'name' and 'run'.
        # This makes the secrets and variables available to the script below.
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_PRINCIPAL_ID: ${{ secrets.AZURE_PRINCIPAL_ID }}
          AZURE_GROUP_NAME: ${{ vars.AZURE_GROUP_NAME }}
        
        # The 'run' block contains only the shell script.
        run: |
          # Step 1: Azure Login with OIDC
          echo "Logging into Azure tenant using OIDC..."
          az login --service-principal \
            -u $AZURE_CLIENT_ID \
            -t $AZURE_TENANT_ID \
            --federated-token "$(cat $ACTIONS_RUNTIME_TOKEN)"
          
          # Step 2: Find the Object ID of the Azure AD group
          echo "Finding Object ID for group '$AZURE_GROUP_NAME'..."
          GROUP_OBJECT_ID=$(az ad group show --group "$AZURE_GROUP_NAME" --query "id" -o tsv)
          if [ -z "$GROUP_OBJECT_ID" ]; then
            echo "::error::Could not find Azure AD group with name '$AZURE_GROUP_NAME'."
            exit 1
          fi
          echo "Found Group Object ID: $GROUP_OBJECT_ID"
          
          # Step 3: Submit PIM activation requests for the GROUP
          echo "Submitting PIM activation requests for the group..."
          az role eligibility schedule request create --principal-id $GROUP_OBJECT_ID --role-definition-id 'b24988ac-6180-42a0-ab88-20f7382dd24c' --scope "/subscriptions/$AZURE_SUBSCRIPTION_ID" --justification "GH Actions Run ${{ github.run_id }}"
          az role eligibility schedule request create --principal-id $GROUP_OBJECT_ID --role-definition-id '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9' --scope "/subscriptions/$AZURE_SUBSCRIPTION_ID" --justification "GH Actions Run ${{ github.run_id }}"
          az role eligibility schedule request create --principal-id $GROUP_OBJECT_ID --role-definition-id 'e4062425-51۱۰-4434-8464-414b433434d3' --scope "/subscriptions/$AZURE_SUBSCRIPTION_ID" --justification "GH Actions Run ${{ github.run_id }}"

          # Step 4: Pause and wait for your manual approvals
          echo "Workflow is now paused, waiting for 3 manual PIM approvals for the group in the Azure Portal..."
          end_time=$((SECONDS+600))
          while [ $SECONDS -lt $end_time ]; do
            active_roles=$(az role assignment list --assignee $AZURE_PRINCIPAL_ID --include-groups --scope "/subscriptions/$AZURE_SUBSCRIPTION_ID" --query "[].roleDefinitionName" -o tsv)
            if echo "$active_roles" | grep -q "Contributor" && echo "$active_roles" | grep -q "User Access Administrator" && echo "$active_roles" | grep -q "Managed Identity Contributor"; then
              echo "All 3 PIM roles have been approved and inherited by the UAMI!"
              break
            fi
            echo "Roles not active for UAMI yet. Waiting 30 seconds..."
            sleep 30
          done
          
          # Step 5: Final check
          final_check=$(az role assignment list --assignee $AZURE_PRINCIPAL_ID --include-groups --scope "/subscriptions/$AZURE_SUBSCRIPTION_ID" --query "[].roleDefinitionName" -o tsv)
          if ! (echo "$final_check" | grep -q "Contributor" && echo "$final_check" | grep -q "User Access Administrator" && echo "$final_check" | grep -q "Managed Identity Contributor"); then
            echo "::error::Timeout: Not all required PIM roles were approved or inherited within the 10-minute window."
            exit 1
          fi
          
          # Step 6: Set the subscription context
          echo "Setting subscription context..."
          az account set --subscription $AZURE_SUBSCRIPTION_ID

      - name: 'Deploy Landing Zone bicep template'
        env:
          AZURE_PREFIX_SECRET: ${{ secrets.AZURE_PREFIX }}
        run: |
          az deployment sub create \
            --name "landing-zone-${{ inputs.environment }}-${{ github.run_id }}" \
            --location ${{ vars.AZURE_REGION }} \
            --template-file ./infrastructure/landing-zone.bicep \
            --parameters environment=${{ inputs.environment }} location=${{ vars.AZURE_REGION }} prefix=${{ env.AZURE_PREFIX_SECRET }} tags="Environment=${{ inputs.environment }} Project=${{ vars.PROJECT_NAME }} DeployedBy=GitHubActions RunId=${{ github.run_id }}"
