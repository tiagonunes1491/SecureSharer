# .github/workflows/reusable-backend-test.yml

name: Backend Test Suite with Coverage

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.11'
        description: 'Python version to use for testing'
      coverage-threshold:
        required: false
        type: number
        default: 90
        description: 'Minimum coverage percentage required'
      upload-coverage:
        required: false
        type: boolean
        default: true
        description: 'Whether to upload coverage reports as artifacts'

jobs:
  backend-tests:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest

    steps:
      # 1. Check out repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up Python environment
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      # 3. Cache pip dependencies for faster builds
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt

      # 5. Generate encryption key for testing
      - name: Set up test environment
        run: |
          cd backend
          export MASTER_ENCRYPTION_KEY=$(python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")
          echo "MASTER_ENCRYPTION_KEY=$MASTER_ENCRYPTION_KEY" >> $GITHUB_ENV

      # 6. Run tests with coverage
      - name: Run pytest with coverage
        run: |
          cd backend
          python -m pytest tests/ -v \
            --cov=app \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-fail-under=${{ inputs.coverage-threshold }} \
            --junitxml=test-results.xml
        env:
          MASTER_ENCRYPTION_KEY: ${{ env.MASTER_ENCRYPTION_KEY }}

      # 7. Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: backend/test-results.xml
          retention-days: 30

      # 8. Upload coverage reports (if enabled)
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: ${{ inputs.upload-coverage && always() }}
        with:
          name: coverage-reports
          path: |
            backend/coverage.xml
            backend/htmlcov/
          retention-days: 30

      # 9. Upload coverage to GitHub (for PR comments)
      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v4
        if: ${{ inputs.upload-coverage }}
        with:
          file: backend/coverage.xml
          directory: backend
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
        continue-on-error: true

      # 10. Display coverage summary
      - name: Coverage Summary
        if: always()
        run: |
          cd backend
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          python -m coverage report --format=markdown >> $GITHUB_STEP_SUMMARY || echo "Coverage report generation failed" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY