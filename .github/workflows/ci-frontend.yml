name: "CI - Frontend Workflows"
on: 
  push:
    branches:
      - '**'
    paths:
      - 'frontend/**'

  pull_request:
    branches:
      - 'main'
    paths:
      - 'frontend/**'

jobs:
  check_changes:
    name: 'Check for file changes'
    runs-on: ubuntu-latest
    outputs:
      tests_required: ${{ steps.changed-files-frontend.outputs.any_changed }}
      coverage_required: ${{ steps.changed-files-frontend.outputs.any_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changed-files to work properly
      
      - uses: tj-actions/changed-files@v44
        id: changed-files-frontend
        with:
          # Get all changed files in frontend directory
          files: |
            frontend/**/*.js
            frontend/**/*.json
            frontend/**/*.html
            frontend/**/*.css

  frontend_tests:
    needs: check_changes
    name: 'Frontend Unit Tests & Security Tests'
    if: needs.check_changes.outputs.tests_required == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run unit tests with coverage
        run: |
          cd frontend
          npm run test:unit -- --coverage
      
      - name: Run security tests
        run: |
          cd frontend
          npm test
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: frontend/coverage
          files: ./lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Generate coverage summary
        if: always()
        run: |
          cd frontend
          if [ -f coverage/coverage-summary.json ]; then
            echo "## ðŸ“Š Code Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            node -e "
              const coverage = require('./coverage/coverage-summary.json');
              const total = coverage.total;
              console.log('| Metric | Coverage | Threshold |');
              console.log('|--------|----------|-----------|');
              console.log('| Lines | ' + total.lines.pct + '% | 75% |');
              console.log('| Functions | ' + total.functions.pct + '% | 80% |');
              console.log('| Branches | ' + total.branches.pct + '% | 70% |');
              console.log('| Statements | ' + total.statements.pct + '% | 75% |');
            " >> $GITHUB_STEP_SUMMARY
          fi

  e2e_tests:
    needs: check_changes
    name: 'Frontend E2E Tests'
    if: needs.check_changes.outputs.tests_required == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps
      
      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: frontend/test-results/
          retention-days: 7

  check_results:
    name: Check Test Results
    if: always() # This job must always run to check the outcomes
    needs:
      - frontend_tests
      - e2e_tests
    runs-on: ubuntu-latest
    steps:
      - name: Verify that all required checks passed
        run: |
          # This script checks the result of each job this one needs.
          # It fails if any of them have failed. 'success' and 'skipped' are considered passing states.
          results="${{ needs.frontend_tests.result }} ${{ needs.e2e_tests.result }}"
          echo "Job results: $results"
          if [[ "${results,,}" =~ "failure" || "${results,,}" =~ "cancelled" ]]; then
            echo "One or more required checks failed. Halting the pipeline."
            exit 1
          else
            echo "All required checks passed or were skipped. Proceeding."
          fi