# templates/database-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "secret-sharer-app.fullname" . }}-db
  labels:
    {{- include "secret-sharer-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  serviceName: {{ include "secret-sharer-app.fullname" . }}-db-headless # Headless service for StatefulSet
  replicas: {{ .Values.database.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "secret-sharer-app.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        {{- include "secret-sharer-app.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: database
    spec:
      serviceAccountName: {{ include "secret-sharer-app.databaseServiceAccountName" . }}
      automountServiceAccountToken: true # Ensure token is mounted for WI/CSI Driver
      
      terminationGracePeriodSeconds: 10
      # We will add securityContext for the pod later
      containers:
        - name: postgres
          image: "{{ .Values.database.image.repository }}:{{ .Values.database.image.tag | default "15-alpine" }}"
          imagePullPolicy: {{ .Values.database.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: postgres # Refers to the containerPort named 'postgres' (5432)
            # Or, for a more thorough check, an exec probe (requires psql in the image):
            # exec:
            #   command:
            #   - sh
            #   - -c
            #   - PGPASSWORD=$POSTGRES_PASSWORD psql -h 127.0.0.1 -U $POSTGRES_USER -d $POSTGRES_DB -c 'SELECT 1'
            initialDelaySeconds: {{ .Values.database.probes.liveness.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .Values.database.probes.liveness.periodSeconds | default 30 }}
            timeoutSeconds: {{ .Values.database.probes.liveness.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.database.probes.liveness.failureThreshold | default 3 }}
            successThreshold: {{ .Values.database.probes.liveness.successThreshold | default 1 }}
          env:
            - name: POSTGRES_DB
              value: {{ .Values.database.auth.database | quote }}
               # Set the user explicitly, typically 'postgres' for the standard image's init process
            - name: POSTGRES_USER
              value: "postgres" # Standard user for initial setup
            # Fetch the password from the K8s secret created by the db-init-spc
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "secret-sharer-app.fullname" . }}-db-init-credentials # K8s Secret synced by db-init-spc
                  key: POSTGRES_PASSWORD # Key within that K8s Secret

            # IMPORTANT: Database user and password will come from Azure Key Vault via CSI Driver
            # We will create Kubernetes secrets from the CSI-mounted secrets,
            # and then reference those secrets here using valueFrom.secretKeyRef
            # For now, this is a placeholder section for where those env vars would go.
            # We'll fully implement this in a later step (Task 5.1)
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            # Example of how user/password MIGHT be set IF NOT using CSI driver (NOT RECOMMENDED FOR PROD)
            # - name: POSTGRES_USER
            #   valueFrom:
            #     secretKeyRef:
            #       name: {{ include "secret-sharer-app.fullname" . }}-db-credentials
            #       key: username
            # - name: POSTGRES_PASSWORD
            #   valueFrom:
            #     secretKeyRef:
            #       name: {{ include "secret-sharer-app.fullname" . }}-db-credentials
            #       key: password

            # These values MUST match the secrets stored in AKV for the backend
            - name: APP_DB_USER
              value: {{ .Values.backend.keyVault.secrets.dbUser | quote }} # Get desired app username from backend's expected AKV secret name
          volumeMounts:
            - name: db-data
              mountPath: /var/lib/postgresql/data
            
            - name: db-secrets-store-inline
              mountPath: "/mnt/db-secrets-store" # Different mount path from backend
              readOnly: true

             # Mount the init script from the ConfigMap to create the database user
            - name: db-init-script-volume # Matches volume name below
              mountPath: /docker-entrypoint-initdb.d # Standard path for postgres init scripts
              readOnly: true 
          
      # Define the CSI Secrets Store Volume for the DB Init SPC ---
      volumes:
        - name: db-secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ include "secret-sharer-app.fullname" . }}-db-init-spc # Reference the DB SPC
                # Define the volume sourcing from the ConfigMap ---
        - name: db-init-script-volume
          configMap:
            name: {{ include "secret-sharer-app.fullname" . }}-db-init-script 
            # Make the script executable
            defaultMode: 0755 # rwxr-xr-x permissions

  volumeClaimTemplates:
    - metadata:
        name: db-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.database.persistence.size | default "1Gi" }}
        # storageClassName: {{ .Values.database.persistence.storageClass | default "default" }} # Uncomment if you need a specific storage class