# templates/database-secretproviderclass.yaml
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ include "secret-sharer-app.fullname" . }}-db-init-spc # Distinct name for DB SPC
  labels:
    {{- include "secret-sharer-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  provider: azure
  parameters:
    usePodIdentity: "false" # Required for Workload Identity
    useVMManagedIdentity: "false" # Not using VM identity directly
    # Uses the Client ID of the *Database* User Assigned Managed Identity
    clientID: {{ .Values.database.serviceAccount.azureClientId | quote }}
    keyvaultName: {{ .Values.backend.keyVault.name | quote }} # Assuming same Key Vault for all secrets
    cloudName: "" # Defaults to AzurePublicCloud
    objects: |
      array:
        - |
          objectName: {{ .Values.database.keyVault.secrets.initPassword }} # Name of the secret in AKV for postgres init password
          objectType: secret
          objectAlias: postgresPasswordKeyVault # Alias for the mounted file & K8s secret key
        # Fetch the application user's password ---
        - |
          objectName: {{ .Values.backend.keyVault.secrets.dbPassword }} # Fetch the app password secret name
          objectType: secret
          objectAlias: appDbPasswordKeyVault # Alias for the *mounted file*

    tenantId: {{ .Values.backend.keyVault.tenantId | quote }} # Assuming same tenant ID

  # Sync the fetched secret into a Kubernetes Secret for the DB pod to use
  secretObjects:
    - secretName: {{ include "secret-sharer-app.fullname" . }}-db-init-credentials # K8s secret name
      type: Opaque
      data:
        # POSTGRES_USER is typically 'postgres' by default and can often be set directly
        # in the StatefulSet env vars. We primarily need the password from Key Vault.
        - objectName: postgresPasswordKeyVault # Alias from objects array
          key: POSTGRES_PASSWORD # Key name in the K8s Secret, matching expected env var