services:
# Database Service (PostgreSQL)
  db:
    image: postgres:15-alpine # Using PostgreSQL 15 Alpine image
    container_name: secure_secret_sharer_db # Optional: give a specific container name
    environment:
      # These MUST match the credentials and db name in your DATABASE_URL
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Mount a named volume for data persistence
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Give PostgreSQL time to initialize
    restart: unless-stopped # Optional: policy to restart the DB container

  # Backend Service (Flask Application)
  backend:
    build:
      context: ./backend # Path to the directory containing the backend's Dockerfile
      dockerfile: Dockerfile # Specifies the Dockerfile name (default is Dockerfile)
    ports:
      # Maps port 5000 on the host to port 5000 in the backend container.
      # This allows you to access the Flask app via http://localhost:5000 on your machine.
      - "5000:5000"
    environment:
      # Environment variables passed to the backend container.
      # MASTER_ENCRYPTION_KEY will be interpolated by Docker Compose from the .env file
      # located in the same directory as this docker-compose.yml file.
      MASTER_ENCRYPTION_KEY: ${MASTER_ENCRYPTION_KEY}
      FLASK_APP: app.main
      FLASK_DEBUG: 'True'
      DATABASE_URL: ${DATABASE_URL} # Pass the DATABASE_URL from root .env
      # Ensure the database URL is correctly formatted for PostgreSQL
      # Example: postgres://secrets_user:yoursecurepassword@db:5432/secrets_db
      # Note: The db service name is used as the hostname in the URL.
    healthcheck: # Ensure this is uncommented
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"] # Using CMD-SHELL for robustness with curl
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s # Give it time to start up
    depends_on:
      db: # Backend depends on the db service
        condition: service_healthy # Waits for db to be healthy

  # Frontend Service (Nginx Server for Static Files)
  frontend:
    build:
      context: ./frontend # Path to the directory containing the frontend's Dockerfile
      dockerfile: Dockerfile
    ports:
      # Maps port 8080 on the host to port 80 in the frontend (Nginx) container.
      # Access the frontend via http://localhost:8080 on your machine.
      # Using 8080 to avoid potential conflicts if port 80 is already in use on the host.
      - "8080:80"
    depends_on:
      backend: # Service name
          condition: service_healthy # Condition to wait for

# Top-level volumes declaration for data persistence
volumes:
  postgres_data: # Defines the named volume used by the db service
    driver: local